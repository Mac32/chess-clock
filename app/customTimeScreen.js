import { router } from "expo-router";
import { useContext, useEffect, useRef, useState } from "react";
import { Pressable, StyleSheet, Text, TextInput, View } from "react-native";
import NavBarCustomTimeScreen from '../components/navBarCustomTimeScreen';
import SectionEditTime from "../components/sectionEditTime";
import { userConfig } from "../constants/userConfig";
import { TiempoContext } from '../context/timeContext';
import updateData from "../utils/updateData";


export default function customTimeScreen() {

    const {
        dataPresetsState,
        setDataPresetsState
    } = useContext(TiempoContext);

    const [isFocus, setIsFocus] = useState(false);
    const [time, setTime] = useState(0);
    const [add, setAdd] = useState(0);
    const [name, setName] = useState('');
    const generatedNameRef = useRef(''); // <--- para guardar el último nombre generado automáticamente


    const handlerChange = (valueText) => {
        setName(valueText);
    }

    const handlerSave = () => {
        const data = {
            name,
            time,
            add,
            select: false
        }

        console.log(data)
        setDataPresetsState(prev => [data, ...prev]);
        router.back()
    }

    useEffect(() => {

    }, [name])

    useEffect(() => {

        const formatTime = (timeInSeconds) => {
            const minutes = Math.floor(timeInSeconds / 60);
            const seconds = timeInSeconds % 60;
            let result = '';

            if (minutes > 0) result += `${minutes} min`;
            if (seconds > 0) result += `${minutes > 0 ? ' ' : ''}${seconds} seg`;
            if (result === '') result = '0 seg';

            return result;
        };

        const generatedName = `${time > 0 ? formatTime(time) : ''}${add !== 0 ? ` | ${add} seg` : ''}`.trim();

        const isNameAutoGenerated = name === '' || name === generatedNameRef.current;

        if (isNameAutoGenerated) {
            setName(generatedName);
            generatedNameRef.current = generatedName;
        }
    }, [time, add,])

    useEffect(() => {
        updateData(dataPresetsState, time, add);
    }, [dataPresetsState])

    return (
        <View style={{ backgroundColor: userConfig.colors.graySecundary, flex: 1, justifyContent: 'space-between', alignItems: 'center' }}>
            <NavBarCustomTimeScreen />


            <View style={{ height: '70%', width: '95%' }}>

                <View>
                    <TextInput
                        style={isFocus ? styles.textInputFocus : styles.textInput}
                        selectTextOnFocus={true}
                        editable={true}
                        placeholder='Nombre'
                        value={name}
                        placeholderTextColor={userConfig.colors.grayTerciary}
                        onFocus={() => setIsFocus(true)}
                        onBlur={() => setIsFocus(false)}
                        onChangeText={(text) => handlerChange(text)}
                    />
                </View>
                <View style={{ marginTop: 20 }}>

                    <SectionEditTime title='Tiempo' time={time} setTime={setTime} />
                    <SectionEditTime title='Incremento' time={add} setTime={setAdd} />
                </View>

            </View>

            <View>
                <Pressable title='Iniciar' onPress={handlerSave}>
                    <Text style={styles.buttonIniciar} >Guardar</Text>
                </Pressable>
            </View>
        </View>
    )


}
const styles = StyleSheet.create({
    textInput: {
        backgroundColor: userConfig.colors.grayPrimary,
        borderTopLeftRadius: 10,
        borderTopRightRadius: 10,
        padding: 10,
        paddingVertical: 20,
        color: userConfig.colors.white,
        fontSize: userConfig.sizes.font,
    },
    textInputFocus: {
        backgroundColor: userConfig.colors.grayPrimary,
        borderTopLeftRadius: 10,
        borderTopRightRadius: 10,
        padding: 10,
        paddingVertical: 20,
        color: userConfig.colors.white,
        fontSize: userConfig.sizes.font,
    },
    buttonIniciar: {
        textAlign: 'center',
        textAlignVertical: 'center',
        borderRadius: 10,
        minWidth: '85%',
        paddingVertical: 12,
        elevation: 3,
        backgroundColor: userConfig.colors.greenPrimery,
        marginBottom: 50,
        color: userConfig.colors.white,
        fontSize: userConfig.sizes.fontBig,
        fontWeight: 'bold'
    }
})